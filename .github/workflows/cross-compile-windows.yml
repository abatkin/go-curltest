name: Cross-compile Windows from Linux

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

jobs:
  cross-compile-windows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24'

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mingw-w64 \
            build-essential \
            autoconf \
            automake \
            libtool \
            pkg-config \
            libssl-dev \
            zlib1g-dev \
            wget \
            unzip

      - name: Set up curl for Windows
        run: |
          # Create working directory
          mkdir -p /tmp/curl-windows
          cd /tmp/curl-windows
          
          # Try to download prebuilt curl for Windows first
          CURL_VERSION="8.11.1_1"
          CURL_URL="https://curl.se/windows/dl-${CURL_VERSION}/curl-${CURL_VERSION}-win64-mingw.zip"
          
          echo "Attempting to download prebuilt curl for Windows..."
          if curl -L -f --retry 3 --retry-delay 5 -o "curl-win64-mingw.zip" "$CURL_URL"; then
            echo "Downloaded prebuilt curl for Windows"
            unzip -q curl-win64-mingw.zip
            CURL_DIR=$(find . -maxdepth 1 -type d -name "curl-*" | head -1)
            if [ -n "$CURL_DIR" ]; then
              echo "CURL_PREFIX=/tmp/curl-windows/$CURL_DIR" >> $GITHUB_ENV
              echo "CURL_METHOD=prebuilt" >> $GITHUB_ENV
            else
              echo "Error: Could not find extracted curl directory"
              exit 1
            fi
          else
            echo "Failed to download prebuilt curl, building from source..."
            
            # Build curl from source for Windows
            ${GITHUB_WORKSPACE}/scripts/build-curl-windows.sh /tmp/curl-windows /tmp/curl-windows/curl-win64
            
            echo "CURL_PREFIX=/tmp/curl-windows/curl-win64" >> $GITHUB_ENV
            echo "CURL_METHOD=source" >> $GITHUB_ENV
          fi

      - name: Cross-compile for Windows
        run: |
          echo "Using curl from: $CURL_PREFIX (method: $CURL_METHOD)"
          
          # Verify curl installation
          if [ -d "$CURL_PREFIX" ]; then
            echo "Curl directory contents:"
            ls -la "$CURL_PREFIX"
            
            if [ -d "$CURL_PREFIX/include" ]; then
              echo "Include directory:"
              ls -la "$CURL_PREFIX/include"
            fi
            
            if [ -d "$CURL_PREFIX/lib" ]; then
              echo "Library directory:"
              ls -la "$CURL_PREFIX/lib"
            fi
          else
            echo "Error: Curl prefix directory not found: $CURL_PREFIX"
            exit 1
          fi
          
          # Set up cross-compilation environment
          export CC=x86_64-w64-mingw32-gcc
          export CXX=x86_64-w64-mingw32-g++
          export CGO_ENABLED=1
          export GOOS=windows
          export GOARCH=amd64
          
          # Set CGO flags
          export CGO_CFLAGS="-I${CURL_PREFIX}/include -DCURL_STATICLIB"
          
          # Set up libraries for static linking
          if [ -d "${CURL_PREFIX}/lib" ] && [ -f "${CURL_PREFIX}/lib/libcurl.a" ]; then
            export CGO_LDFLAGS="-L${CURL_PREFIX}/lib -lcurl -lws2_32 -lcrypt32 -luser32 -lkernel32"
          else
            echo "Warning: Static curl library not found, using system linking"
            export CGO_LDFLAGS="-lws2_32 -lcrypt32 -luser32 -lkernel32"
          fi
          
          echo "Cross-compilation environment:"
          echo "  CC=$CC"
          echo "  CGO_ENABLED=$CGO_ENABLED"
          echo "  GOOS=$GOOS"
          echo "  GOARCH=$GOARCH"
          echo "  CGO_CFLAGS=$CGO_CFLAGS"
          echo "  CGO_LDFLAGS=$CGO_LDFLAGS"
          
          # Build the application
          echo "Building go-curltest for Windows..."
          go build -v -x -ldflags="-s -w" -o curltest.exe .
          
          # Verify the build
          echo "Build completed successfully!"
          ls -la curltest.exe
          file curltest.exe

      - name: Test Windows executable
        run: |
          # Run basic validation tests
          ./scripts/test-windows-build.sh

      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: curltest-windows-amd64
          path: curltest.exe